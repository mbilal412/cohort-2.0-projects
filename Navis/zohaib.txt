/* parent_child_msgqueue.c
   Communication between parent and child using System V message queue
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <sys/types.h>
#include <unistd.h>

#define MSGSZ 128

// Message structure
struct msgbuf {
    long mtype;
    char mtext[MSGSZ];
};

int main() {
    key_t key;
    int msgid;
    pid_t pid;
    struct msgbuf message;

    // Generate unique key
    key = ftok("progfile", 65);
    if (key == -1) {
        perror("ftok");
        exit(1);
    }

    // Create message queue
    msgid = msgget(key, 0666 | IPC_CREAT);
    if (msgid == -1) {
        perror("msgget");
        exit(1);
    }

    pid = fork();

    if (pid < 0) {
        perror("fork");
        exit(1);
    }

    // ---------- CHILD PROCESS ----------
    else if (pid == 0) {
        pid_t cid = getpid();
        printf("Child Process: PID = %d\n", cid);

        // Send child ID to parent
        message.mtype = 1;
        snprintf(message.mtext, MSGSZ, "%d", cid);

        if (msgsnd(msgid, &message, sizeof(message.mtext), 0) == -1) {
            perror("msgsnd");
            exit(1);
        }

        printf("Child Process: Sent ID to parent.\n");
    }

    // ---------- PARENT PROCESS ----------
    else {
        sleep(1); // wait for message

        if (msgrcv(msgid, &message, sizeof(message.mtext), 1, 0) == -1) {
            perror("msgrcv");
            exit(1);
        }

        printf("Parent Process: Received ID from child = %s\n", message.mtext);

        // Print upper five digits of child PID (if longer)
        printf("Parent Process: Upper five numbers of ID: ");
        for (int i = 0; i < 5 && message.mtext[i] != '\0'; i++) {
            putchar(message.mtext[i]);
        }
        printf("\n");

        // Remove message queue
        msgctl(msgid, IPC_RMID, NULL);
    }

    return 0;
}