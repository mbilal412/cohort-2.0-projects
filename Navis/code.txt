// filename: ipc_pid_pipe.c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>   // for wait()
#include <string.h>

/* helper: return left-most up to 5 digits of a positive integer as integer */
int left_most_five_digits(int x) {
    if (x < 0) x = -x;
    int digits = 0;
    int t = x;
    if (t == 0) return 0;
    while (t) { digits++; t /= 10; }
    if (digits <= 5) return x;
    int remove = digits - 5;
    while (remove--) x /= 10;
    return x;
}

int main(void) {
    int fd[2];
    pid_t pid;

    if (pipe(fd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    pid = fork();
    if (pid < 0) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) {
        // child process
        close(fd[0]); // close read end in child
        pid_t mypid = getpid();
        printf("Child process: Process ID of child process: %d\n", (int)mypid);

        int sendval = (int)mypid;
        if (write(fd[1], &sendval, sizeof(sendval)) != sizeof(sendval)) {
            perror("child write");
            close(fd[1]);
            exit(EXIT_FAILURE);
        }
        close(fd[1]);
        exit(EXIT_SUCCESS);
    } else {
        // parent process
        close(fd[1]); // close write end in parent
        int recvid;
        ssize_t r = read(fd[0], &recvid, sizeof(recvid));
        if (r == -1) {
            perror("parent read");
            close(fd[0]);
            exit(EXIT_FAILURE);
        } else if (r == 0) {
            fprintf(stderr, "parent: no data (child closed pipe)\n");
            close(fd[0]);
            exit(EXIT_FAILURE);
        }
        printf("Parent process: %d received from child process\n", recvid);

        int upper5 = left_most_five_digits(recvid);
        printf("Parent prints upper five digits of the received id: %d\n", upper5);

        close(fd[0]);
        wait(NULL); // wait for child to finish
    }
    return 0;
}
