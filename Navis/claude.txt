#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>

int main() {
    int pipe_c2p[2]; // Pipe from child to parent
    int pipe_p2c[2]; // Pipe from parent to child
    pid_t pid;
    
    // Create pipes
    if (pipe(pipe_c2p) == -1 || pipe(pipe_p2c) == -1) {
        perror("Pipe creation failed");
        exit(1);
    }
    
    // Fork a child process
    pid = fork();
    
    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    }
    
    if (pid == 0) {
        // Child process
        close(pipe_c2p[0]); // Close unused read end
        close(pipe_p2c[1]); // Close unused write end
        
        // Send child's PID to parent
        pid_t child_pid = getpid();
        write(pipe_c2p[1], &child_pid, sizeof(pid_t));
        printf("Child Process: PID = %d\n", child_pid);
        printf("Child Process: Sent PID to parent\n");
        
        // Receive message from parent
        char buffer[100];
        read(pipe_p2c[0], buffer, sizeof(buffer));
        printf("Child Process: Received message from parent: '%s'\n", buffer);
        
        // Extract and print upper 5 numbers from received message
        printf("Child Process: Upper five numbers from message: ");
        int count = 0;
        for (int i = 0; buffer[i] != '\0' && count < 5; i++) {
            if (buffer[i] >= '0' && buffer[i] <= '9') {
                printf("%c ", buffer[i]);
                count++;
            }
        }
        printf("\n");
        
        close(pipe_c2p[1]);
        close(pipe_p2c[0]);
        exit(0);
    }
    else {
        // Parent process
        close(pipe_c2p[1]); // Close unused write end
        close(pipe_p2c[0]); // Close unused read end
        
        printf("Parent Process: PID = %d\n", getpid());
        printf("Parent Process: Created child process\n");
        
        // Receive child's PID
        pid_t received_pid;
        read(pipe_c2p[0], &received_pid, sizeof(pid_t));
        printf("Parent Process: Received child PID = %d\n", received_pid);
        
        // Send message to child
        char message[] = "Hello Child! Numbers: 12345678";
        write(pipe_p2c[1], message, strlen(message) + 1);
        printf("Parent Process: Sent message to child: '%s'\n", message);
        
        // Wait for child to finish
        wait(NULL);
        printf("Parent Process: Child process finished\n");
        
        close(pipe_c2p[0]);
        close(pipe_p2c[1]);
    }
    
    return 0;
}